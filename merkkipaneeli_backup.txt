 public class MerkkiPaneeli extends JPanel {

        /** ArrayList -kenttä, jonne luodaan ja talletetaan sillä hetkellä kartta-alueella olevat Toimijat
         * SuosikkiLahella -olion muodossa.
         */
        ArrayList<SuosikkiLahella> suosikitLahella;
        private final ImageIcon omaPaikkaIkoni;
        private Dimension kartanKoko;
        private JLabel omaLabel;
        private Kayttaja kayttaja;
        private Point omaPaikka;

      
        
        public MerkkiPaneeli(Kayttaja k, Dimension koko) {
            this.setLayout(null);
            this.setOpaque(false);
            this.suosikitLahella = new ArrayList();
            this.omaPaikkaIkoni = new ImageIcon("tyyppipinni.png",
            "Sijaintimerkki varustettuna ihmisen kuvalla.");
            this.omaLabel = new JLabel(this.omaPaikkaIkoni);
            this.kartanKoko = koko;
            this.kayttaja = k;
            this.add(omaLabel);
             int yy = (int)Math.round(kartanKoko.getHeight()/2);
            int xx = (int)Math.round((kartanKoko.getWidth())/2);
            this.omaPaikka = new Point(xx,yy);
            this.asetaOmaKeskelle();
            System.out.println("asetetaan omalabel kohtaan " + xx + " : " + yy);
            

        }
        
        private void asetaOmaKeskelle() {
            this.add(omaLabel);
            omaLabel.setSize(20, 20);
            omaLabel.setLocation(omaPaikka);            
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            this.setOpaque(false);//läpinäkyvä
            this.add(omaLabel);
          this.asetaSuosikitPaneeliin((Asiakas) kayttaja, karttapaneeli.karttaKuva);
            revalidate();
            repaint();
            
        }

        /**
         * Metodi joka asettaa merkkipaneelin koon samaksi kuin kartan koko.*
         */
        public void setPreferredSize() {
            super.setPreferredSize(kartanKoko);
        }

        

        /**
         * Metodi joka tutkii onko asiakkaan suosikkitoimijoita kartan alueella
         * ja jos on, asettaa kartalle markkerin vastaavalle paikalle.*
         */
       public boolean asetaSuosikitPaneeliin(Kayttaja kayttaja, Kartta kartta) {
            if (kayttaja.getClass().equals(Asiakas.class)) {
            LatLng sijainti = new LatLng(0.0, 0.0);
            Asiakas a = (Asiakas)kayttaja;
            this.suosikitLahella.clear();
            int i = 1;
            for (Toimija lemppari : a.getSuosikit()) {
                if (lemppari.getStatus()==true) {
                sijainti = lemppari.getSijainti().getKoordinaatit();
                if (kartta.onkoKartalla(sijainti)) {
                    suosikitLahella.add(new SuosikkiLahella(i, sijainti, kartta, lemppari));
                    i++;
                }
                }
            }
            if (!suosikitLahella.isEmpty()) {
                //aseta jLabelit paikoilleen paneeliin
                JLabel asetettava = new JLabel("");
                System.out.println("suosikitLahella ei oo tyhjä");
                for (SuosikkiLahella lahiSuosikki : suosikitLahella) {
                    asetettava = lahiSuosikki.getSuosikkiLabel();
                    this.add(asetettava);
                    asetettava.setSize(20, 20);
                    asetettava.setLocation(lahiSuosikki.getSijaintiKuvassa().x, lahiSuosikki.getSijaintiKuvassa().y);
                }
                //luo lista numeroiden toimijoista kartan viereen (jos ehtii!)
                return true;
            }
            return false;
            

        } else {
                return false;
        }
        }


      
    }


             
        
        

/**JPanelin perivä luokka jossa on päivittyvä karttapohja.
 *
 * @author kaisa
 */
